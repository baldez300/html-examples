<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Playing a local video</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<style>
html, body {
	background: black;
	color: white;
}
html, body, video {
	padding: 0;
	margin: 0;
}
video {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	width: 100%;
	height: 100%;
}
</style>
</head>
<body>

<video controls>
<source src="videos/sintel-short.mp4" type="video/mp4">
</video>

<!-- Check https://quuz.org/webvtt/ for validation. -->
<script type="text/vtt" id="subtitle" data-label="English" data-lang="en">
	WEBVTT

	0
	00:00:00.000 --> 00:00:12.000
	<v Test>[Test]</v>
	
	NOTE This is a comment and must be preceded by a blank line
	
	1
	00:00:18.700 --> 00:00:21.500
	This blade has a dark past.
	
	2
	00:00:22.800 --> 00:00:26.800
	It has shed much innocent blood.
	
	3
	00:00:29.000 --> 00:00:32.450
	You're a fool for traveling alone,
	so completely unprepared.
	
	4
	00:00:32.750 --> 00:00:35.800
	You're lucky your blood's still flowing.
	
	5
	00:00:36.250 --> 00:00:37.300
	Thank you.
	
	6
	00:00:38.500 --> 00:00:40.000
	So...
	
	7
	00:00:40.400 --> 00:00:44.800
	What brings you to
	the land of the gatekeepers?
	
	8
	00:00:46.000 --> 00:00:48.500
	I'm searching for someone.
	
	9
	00:00:49.000 --> 00:00:53.200
	Someone very dear?
	A kindred spirit?
	
	10
	00:00:54.400 --> 00:00:56.000
	A dragon.
	
	11
	00:00:58.850 --> 00:01:01.750
	A dangerous quest for a lone hunter.
	
	12
	00:01:02.950 --> 00:01:05.870
	I've been alone for
	as long as I can remember.
	
	13
	00:01:58.250 --> 00:01:59.500
	We're almost done. Shhh...

</script>

<script>
function parse_timestamp(s) {
	//var match = s.match(/^(?:([0-9]{2,}):)?([0-5][0-9]):([0-5][0-9][.,][0-9]{0,3})/);
	// Relaxing the timestamp format:
	var match = s.match(/^(?:([0-9]+):)?([0-5][0-9]):([0-5][0-9](?:[.,][0-9]{0,3})?)/);
	if (match == null) {
		throw 'Invalid timestamp format: ' + s;
	}
	var hours = parseInt(match[1] || "0", 10);
	var minutes = parseInt(match[2], 10);
	var seconds = parseFloat(match[3].replace(',', '.'));
	return seconds + 60 * minutes + 60 * 60 * hours;
}

// https://w3c.github.io/webvtt/
// https://developer.mozilla.org/en/docs/Web/API/Web_Video_Text_Tracks_Format
// https://en.wikipedia.org/wiki/WebVTT
//
// For better parsers, look at:
// https://github.com/annevk/webvtt
// https://github.com/mozilla/vtt.js
function quick_and_dirty_vtt_or_srt_parser(vtt) {
	var lines = vtt.trim().replace('\r\n', '\n').split(/[\r\n]/).map(function(line) {
		return line.trim();
	});
	var cues = [];
	var start = null;
	var end = null;
	var payload = null;
	for (var i = 0; i < lines.length; i++) {
		if (lines[i].indexOf('-->') >= 0) {
			var splitted = lines[i].split(/[ \t]+-->[ \t]+/);
			if (splitted.length != 2) {
				throw 'Error when splitting "-->": ' + lines[i];
			}

			// Already ignoring anything past the "end" timestamp (i.e. cue settings).
			start = parse_timestamp(splitted[0]);
			end = parse_timestamp(splitted[1]);
		} else if (lines[i] == '') {
			if (start && end) {
				var cue = new VTTCue(start, end, payload);
				cues.push(cue);
				start = null;
				end = null;
				payload = null;
			}
		} else if(start && end) {
			if (payload == null) {
				payload = lines[i];
			} else {
				payload += '\n' + lines[i];
			}
		}
	}
	if (start && end) {
		var cue = new VTTCue(start, end, payload);
		cues.push(cue);
	}

	return cues;
}

function init() {
	// http://www.html5rocks.com/en/tutorials/track/basics/
	// https://www.iandevlin.com/blog/2015/02/javascript/dynamically-adding-text-tracks-to-html5-video
	var video = document.querySelector('video');
	var subtitle = document.getElementById('subtitle');
	var track = video.addTextTrack('subtitles', subtitle.dataset.label, subtitle.dataset.lang);
	track.mode = "showing";
	quick_and_dirty_vtt_or_srt_parser(subtitle.innerHTML).map(function(cue) {
		track.addCue(cue);
	});
}
init();
</script>

</body>
</html>